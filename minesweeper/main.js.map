{"version":3,"file":"main.js","mappings":"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","sources":["webpack://minesweeper/./src/js/index.js"],"sourcesContent":["import '../scss/main.scss';\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  // init\n  const body = document.querySelector('body');\n  const header = document.createElement('header');\n  body.appendChild(header);\n  header.innerHTML =\n    '<div class=\"container\"><h1>Run Away From a Fox</h1></div>';\n  const menu = document.createElement('div');\n  menu.className = 'menu';\n  menu.innerHTML = ` <div class=\"container\">\n  <div class=\"settings\">\n  <div class=\"difficulty\">\n    <div class=\"dropdown\">\n      <select name=\"difficulty\" id=\"difficulty\" class=\"dropbtn\">\n        <option value=\"easy\">easy</option>\n        <option value=\"medium\">medium</option>\n        <option value=\"hard\">hard</option>\n      </select>\n    </div>\n  </div>\n  <div class=\"mines\">\n    <input type=\"range\" min=\"10\" max=\"99\" step=\"1\" value=\"10\">\n    <div class=\"value\">10</div>\n  </div>\n  <div class=\"start\"><button class=\"start-btn\">Start game</button></div>\n  <button class=\"sound\"></button>\n</div>\n<div class=\"gamestats\">\n  <div class=\"timer-title\">time:</div>\n  <div class=\"timer\">00:00</div>\n  <div class=\"clicks-title\">clicks:</div>\n  <div class=\"clicks\">0</div>\n  <div class=\"flags-title\">flags:</div>\n  <div class=\"flags\">0</div>\n</div> </div> `;\n  body.appendChild(menu);\n  const main = document.createElement('div');\n  main.className = 'main';\n  body.appendChild(main);\n  main.innerHTML = '<canvas id=\"canvas\" width=\" 480\" height=\"480\"></canvas>';\n  const highscore = document.createElement('div');\n  highscore.className = 'highscore';\n  body.appendChild(highscore);\n  highscore.innerHTML = `\n  <div class=\"container\">\n    <h2>highscore</h2>\n  </div>`;\n  // canvas init\n  const canvas = document.getElementById('canvas');\n  canvas.innerText = 'Your browser does not support canvas';\n  canvas.style.border = 'none';\n  const ctx = canvas.getContext('2d');\n  ctx.fillStyle = '#222';\n\n  // game settings\n  const gameSettings = {\n    easy: {\n      difficulty: 'easy',\n      bombs: 10,\n      rows: 10,\n      columns: 10,\n    },\n    medium: {\n      difficulty: 'medium',\n      bombs: 10,\n      rows: 15,\n      columns: 15,\n    },\n    hard: {\n      difficulty: 'hard',\n      bombs: 10,\n      rows: 25,\n      columns: 25,\n    },\n  };\n  // game sound\n  const soundBtn = document.querySelector('.sound');\n  const soundOn = 'on';\n  soundBtn.addEventListener('click', () => {\n    if (soundBtn.classList.contains(soundOn)) {\n      soundBtn.classList.remove(soundOn);\n    } else {\n      soundBtn.classList.add(soundOn);\n    }\n  });\n\n  function playSound(type) {\n    if (soundBtn.classList.contains(soundOn)) {\n      const audio = new Audio(`./assets/${type}.wav`);\n      audio.play();\n    }\n  }\n\n  // takes bombs from input\n  const bombsInput = document.querySelector('input[type=range]');\n  let currentBombsInput = gameSettings.easy.bombs;\n  function getInput() {\n    currentBombsInput = bombsInput.value;\n    const bombsMenuCount = document.querySelector('.value');\n    bombsMenuCount.innerHTML = currentBombsInput;\n  }\n  // takes difficulty\n  const difficultyOptions = document.getElementById('difficulty');\n  let currDifficulty = gameSettings.easy.difficulty;\n  difficultyOptions.addEventListener('change', (e) => {\n    const { value } = e.target[e.target.options.selectedIndex];\n    currDifficulty = value;\n    return currDifficulty;\n  });\n  bombsInput.addEventListener('input', getInput);\n  // show clicks count\n  let clicksCount = 0;\n  const menuClickCount = document.querySelector('.clicks');\n\n  // constants and variables\n  const bombs = currentBombsInput;\n  let { columns } = gameSettings.easy;\n  let rows = gameSettings.easy.columns;\n  // show flags\n  let flagsCount = bombs;\n  let bombsFound = 0;\n  let openCells = 0;\n  const menuFlagsCount = document.querySelector('.flags');\n  menuFlagsCount.innerHTML = flagsCount;\n  // set timer on game start\n  const menuTimer = document.querySelector('.timer');\n  let totalTime = 0;\n  let startTimer;\n  // show time in min: sec\n  function initTimer() {\n    totalTime += 1;\n    const min = Math.floor(totalTime / 60)\n      .toString()\n      .padStart(2, '0');\n    const sec = Math.floor(totalTime % 60)\n      .toString()\n      .padStart(2, '0');\n    menuTimer.innerHTML = `${min}:${sec}`;\n  }\n\n  // calculate cellsize, then generate 2d array with given cols, rows\n  let cellSize = Math.floor(parseInt(canvas.width, 10) / columns);\n  function generateInitMatrix(cols, rows) {\n    const matrix = new Array(cols);\n    for (let i = 0; i < matrix.length; i += 1) {\n      matrix[i] = new Array(rows);\n    }\n    return matrix;\n  }\n  let gameField = generateInitMatrix(columns, rows);\n  // cell class\n  class Cell {\n    constructor(size, i, j) {\n      this.size = size;\n      this.i = i;\n      this.j = j;\n      this.coordX = i * size;\n      this.coordY = j * size;\n      this.isShown = false;\n      this.isBomb = false;\n      this.isFlagged = false;\n      this.nearestBombsCount = 0;\n    }\n\n    createCell() {\n      ctx.fillRect(\n        this.coordX + 1,\n        this.coordY + 1,\n        this.size - 2,\n        this.size - 2,\n      );\n      ctx.strokeRect(this.coordX, this.coordY, this.size, this.size);\n      ctx.strokeStyle = '#2E86C1';\n      ctx.lineWidth = 1;\n      ctx.stroke();\n    }\n\n    countNeigbourBombs() {\n      let result = 0;\n      if (this.isBomb) {\n        this.nearestBombsCount = -1;\n        return;\n      }\n      for (let offsetX = -1; offsetX <= 1; offsetX += 1) {\n        for (let offsetY = -1; offsetY <= 1; offsetY += 1) {\n          const indexX = this.i + offsetX;\n          const indexY = this.j + offsetY;\n          if (indexX > -1 && indexX < columns && indexY > -1 && indexY < rows) {\n            const neighbourCell = gameField[indexX][indexY];\n            if (neighbourCell.isBomb) {\n              result += 1;\n            }\n          }\n        }\n      }\n      this.nearestBombsCount = result;\n    }\n\n    render() {\n      ctx.fillStyle = 'lightblue';\n      this.createCell();\n      if (this.isShown) {\n        if (this.isBomb) {\n          ctx.fillStyle = '#F5B7B1';\n          this.createCell();\n          const bombImg = new Image();\n          bombImg.src = './assets/fox.png';\n          bombImg.onload = () => {\n            if (columns === 25) {\n              ctx.drawImage(\n                bombImg,\n                this.coordX + this.size / 4,\n                this.coordY + this.size / 4,\n                10,\n                10,\n              );\n            } else {\n              ctx.drawImage(\n                bombImg,\n                this.coordX + this.size / 4,\n                this.coordY + this.size / 4,\n                20,\n                20,\n              );\n            }\n          };\n        } else {\n          switch (this.nearestBombsCount) {\n            case 1:\n              ctx.fillStyle = '#D5F5E3 ';\n              break;\n            case 2:\n              ctx.fillStyle = '#D4E6F1';\n              break;\n            case 3:\n              ctx.fillStyle = '#E8DAEF';\n              break;\n            case 4:\n              ctx.fillStyle = '#EBDEF0';\n              break;\n            case 5:\n              ctx.fillStyle = '#FCF3CF';\n              break;\n            case 6:\n              ctx.fillStyle = '#FDEBD0';\n              break;\n            case 7:\n              ctx.fillStyle = '#FADBD8';\n              break;\n            case 8:\n              ctx.fillStyle = '#F2D7D5';\n              break;\n            default:\n              ctx.fillStyle = '#EBF5FB ';\n              break;\n          }\n        }\n        this.createCell();\n        if (this.nearestBombsCount > 0) {\n          ctx.font = '30px Arial';\n          if (columns === 15) {\n            ctx.font = '20px Arial';\n          }\n          if (columns === 25) {\n            ctx.font = '12px Arial';\n          }\n          ctx.fillStyle = '#154360';\n          ctx.textAlign = 'center';\n          if (columns === 25) {\n            ctx.fillText(\n              this.nearestBombsCount,\n              this.coordX + this.size / 2,\n              this.coordY + this.size - 4,\n            );\n          }\n          if (columns === 15) {\n            ctx.fillText(\n              this.nearestBombsCount,\n              this.coordX + this.size / 2,\n              this.coordY + this.size - 6,\n            );\n          }\n          if (columns === 10) {\n            ctx.fillText(\n              this.nearestBombsCount,\n              this.coordX + this.size / 2,\n              this.coordY + this.size - 10,\n            );\n          }\n        }\n      } else {\n        ctx.fillStyle = 'lightblue';\n        this.createCell();\n      }\n      if (this.isFlagged) {\n        ctx.fillStyle = '#F9E79F';\n        this.createCell();\n        const rabbitImg = new Image();\n        rabbitImg.src = './assets/rabbit.png';\n        rabbitImg.onload = () => {\n          if (columns === 25) {\n            ctx.drawImage(\n              rabbitImg,\n              this.coordX + this.size / 4,\n              this.coordY + this.size / 4,\n              10,\n              10,\n            );\n          } else {\n            ctx.drawImage(\n              rabbitImg,\n              this.coordX + this.size / 4,\n              this.coordY + this.size / 4,\n              20,\n              20,\n            );\n          }\n        };\n      }\n      if (this.nearestBombsCount === 0 && !this.isShown) {\n        this.openEmptyCells();\n      }\n    }\n\n    showCell() {\n      this.isShown = true;\n      if (this.nearestBombsCount === 0) {\n        this.openEmptyCells();\n      }\n    }\n\n    openEmptyCells() {\n      for (let offsetX = -1; offsetX <= 1; offsetX += 1) {\n        for (let offsetY = -1; offsetY <= 1; offsetY += 1) {\n          const indexX = this.i + offsetX;\n          const indexY = this.j + offsetY;\n          if (indexX > -1 && indexX < columns && indexY > -1 && indexY < rows) {\n            const neighbourCell = gameField[indexX][indexY];\n            if (!neighbourCell.isBomb && !neighbourCell.isShown) {\n              neighbourCell.showCell();\n            }\n          }\n        }\n      }\n    }\n  }\n  // generate bombs layout and add them to array\n\n  function createBombsLayout(columns, rows, bombs) {\n    for (let i = 0; i < bombs; i += 1) {\n      const rowI = Math.floor(Math.random() * rows);\n      const colI = Math.floor(Math.random() * columns);\n      if (!gameField[rowI][colI].isBomb) {\n        gameField[rowI][colI].isBomb = true;\n      } else {\n        i -= 1;\n      }\n    }\n  }\n  // create and draw game field with randomly set bombs\n  function createGameField(columns, rows, bombs) {\n    for (let i = 0; i < columns; i += 1) {\n      for (let j = 0; j < rows; j += 1) {\n        gameField[i][j] = new Cell(cellSize, i, j);\n      }\n    }\n    createBombsLayout(columns, rows, bombs);\n    // count nearest bombs and add their count to array\n    for (let i = 0; i < columns; i += 1) {\n      for (let j = 0; j < rows; j += 1) {\n        gameField[i][j].countNeigbourBombs();\n      }\n    }\n  }\n\n  const drawGameField = (columns, rows) => {\n    for (let i = 0; i < columns; i += 1) {\n      for (let j = 0; j < rows; j += 1) {\n        gameField[i][j].render();\n      }\n    }\n  };\n\n  createGameField(columns, rows);\n  drawGameField(columns, rows);\n\n  // game win/lose modal\n  function showModal(status) {\n    const modal = document.createElement('div');\n    modal.className = 'modal';\n    if (status === 'lose') {\n      modal.innerHTML = ` <div class=\"modal-content\">\n      <span class=\"close\">x</span>\n      <p>Game over! Fox caught the bunny!</p>\n      <img class=\"modal-img\" src=\"./assets/rabbit-lose.svg\"/>\n    </div>\n    `;\n    } else {\n      modal.innerHTML = ` <div class=\"modal-content\">\n      <span class=\"close\">x</span>\n      <p>You win! Bunny ran away from fox!</p>\n      <img class=\"modal-img\" src=\"./assets/rabbit-win.svg\"/>\n    </div>\n    `;\n    }\n    body.appendChild(modal);\n    const close = document.querySelector('.close');\n    modal.style.display = 'block';\n    close.addEventListener('click', () => {\n      modal.style.display = 'none';\n    });\n\n    window.addEventListener('click', (e) => {\n      if (e.target === modal) {\n        modal.style.display = 'none';\n      }\n    });\n  }\n  // game over function\n  function gameOver() {\n    for (let i = 0; i < columns; i += 1) {\n      for (let j = 0; j < rows; j += 1) {\n        gameField[i][j].showCell();\n        gameField[i][j].render();\n      }\n    }\n    clearInterval(startTimer);\n    playSound('lose');\n    showModal('lose');\n  }\n  // get coordinates of cell and change it's status\n  canvas.addEventListener('click', (e) => {\n    const ctxRect = canvas.getBoundingClientRect();\n    const ctxX = Math.round(e.clientX - ctxRect.left);\n    const ctxY = Math.round(e.clientY - ctxRect.top);\n    const i = Math.floor(ctxX / cellSize);\n    const j = Math.floor(ctxY / cellSize);\n    const currentCell = gameField[i][j];\n    playSound('click');\n    if (!currentCell.isShown && !currentCell.isBomb) {\n      openCells += 1;\n    }\n\n    if (currentCell.nearestBombsCount === 0) {\n      currentCell.openEmptyCells();\n      currentCell.render();\n      clicksCount += 1;\n    } else if (currentCell.isBomb) {\n      gameOver();\n    } else {\n      currentCell.showCell();\n      currentCell.render();\n      clicksCount += 1;\n    }\n    menuClickCount.innerHTML = clicksCount;\n  });\n  // highscore show\n  function showHighScore() {\n    if (window.localStorage.getItem('highscore')) {\n      const results = JSON.parse(window.localStorage.getItem('highscore'));\n      if (results.length > 10) {\n        results.slice(-10);\n      }\n      const resultsList = document.createElement('ol');\n      highscore.innerHTML = `\n      <div class=\"container\">\n        <h2>highscore</h2>\n      </div>`;\n      highscore.querySelector('.container').appendChild(resultsList);\n      results.forEach((result) => {\n        resultsList.innerHTML += `<li>Time: ${result.time} and ${result.clicks} clicks</li>`;\n      });\n    }\n  }\n  // start game\n  const freeCells = gameField.flat().length - currentBombsInput;\n  const startBtn = document.querySelector('.start-btn');\n  function startGame() {\n    columns = gameSettings[currDifficulty].columns;\n    rows = gameSettings[currDifficulty].rows;\n    cellSize = Math.floor(parseInt(canvas.width, 10) / columns);\n    const field = generateInitMatrix(columns, rows);\n    gameField = field;\n    createGameField(columns, rows, currentBombsInput);\n    drawGameField(columns, rows);\n    totalTime = 0;\n    bombsFound = 0;\n    clicksCount = 0;\n    flagsCount = currentBombsInput;\n    menuFlagsCount.innerHTML = flagsCount;\n    showHighScore();\n    startTimer = setInterval(initTimer, 1000);\n    openCells = gameField.flat().filter((cell) => cell.isShown).length;\n  }\n  // game win\n  const highscoreArray = [];\n  function winGame(bombs, flags) {\n    if (flags === 0 && bombs === currentBombsInput && openCells === freeCells) {\n      playSound('win');\n      showModal('win');\n      // localStorage\n      const gameStats = {\n        time: totalTime,\n        clicks: clicksCount,\n        flags: flagsCount,\n      };\n      window.localStorage.setItem('gameStats', JSON.stringify(gameStats));\n      highscoreArray.push(gameStats);\n      window.localStorage.setItem('highscore', JSON.stringify(highscoreArray));\n    }\n  }\n\n  // add flags\n  canvas.addEventListener('contextmenu', (e) => {\n    e.preventDefault();\n    const ctxRect = canvas.getBoundingClientRect();\n    const ctxX = Math.round(e.clientX - ctxRect.left);\n    const ctxY = Math.round(e.clientY - ctxRect.top);\n    const i = Math.floor(ctxX / cellSize);\n    const j = Math.floor(ctxY / cellSize);\n    playSound('click');\n    if (!gameField[i][j].isFlagged) {\n      gameField[i][j].isFlagged = true;\n      gameField[i][j].render();\n      flagsCount -= 1;\n      if (flagsCount < 0) {\n        flagsCount = 0;\n      }\n      if (gameField[i][j].isBomb) {\n        bombsFound += 1;\n      }\n    } else if (gameField[i][j].isFlagged) {\n      gameField[i][j].isFlagged = false;\n      gameField[i][j].render();\n      flagsCount += 1;\n    }\n    clicksCount += 1;\n\n    menuClickCount.innerHTML = clicksCount;\n    menuFlagsCount.innerHTML = flagsCount;\n    winGame(bombsFound, flagsCount);\n  });\n\n  // start game\n  startBtn.addEventListener('click', startGame);\n  startGame();\n});\n\n//\n"],"names":["window","addEventListener","body","document","querySelector","header","createElement","appendChild","innerHTML","menu","className","main","highscore","canvas","getElementById","innerText","style","border","ctx","getContext","fillStyle","gameSettings","easy","difficulty","bombs","rows","columns","medium","hard","soundBtn","soundOn","playSound","type","classList","contains","Audio","concat","play","remove","add","bombsInput","currentBombsInput","difficultyOptions","currDifficulty","e","value","target","options","selectedIndex","clicksCount","menuClickCount","flagsCount","bombsFound","openCells","menuFlagsCount","startTimer","menuTimer","totalTime","initTimer","min","Math","floor","toString","padStart","sec","cellSize","parseInt","width","generateInitMatrix","cols","matrix","Array","i","length","gameField","Cell","size","j","_classCallCheck","this","coordX","coordY","isShown","isBomb","isFlagged","nearestBombsCount","key","fillRect","strokeRect","strokeStyle","lineWidth","stroke","result","offsetX","offsetY","indexX","indexY","_this","createCell","bombImg","Image","src","onload","drawImage","font","textAlign","fillText","rabbitImg","openEmptyCells","neighbourCell","showCell","createGameField","rowI","random","colI","createBombsLayout","countNeigbourBombs","drawGameField","render","showModal","status","modal","close","display","ctxRect","getBoundingClientRect","ctxX","round","clientX","left","ctxY","clientY","top","currentCell","clearInterval","gameOver","freeCells","flat","startBtn","startGame","field","localStorage","getItem","results","JSON","parse","slice","resultsList","forEach","time","clicks","showHighScore","setInterval","filter","cell","highscoreArray","preventDefault","flags","gameStats","setItem","stringify","push","winGame"],"sourceRoot":""}